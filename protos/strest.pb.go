// Code generated by protoc-gen-go.
// source: strest.proto
// DO NOT EDIT!

/*
Package strest is a generated protocol buffer package.

It is generated from these files:
	strest.proto

It has these top-level messages:
	ResponseSpec
	StreamingResponseSpec
	ResponseReply
*/
package strest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseSpec struct {
	// how many bytes we expect in return.
	Length int32 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	// how long (in milliseconds) we want the response to wait.
	Latency   int64   `protobuf:"varint,2,opt,name=latency" json:"latency,omitempty"`
	ErrorRate float32 `protobuf:"fixed32,3,opt,name=errorRate" json:"errorRate,omitempty"`
}

func (m *ResponseSpec) Reset()                    { *m = ResponseSpec{} }
func (m *ResponseSpec) String() string            { return proto.CompactTextString(m) }
func (*ResponseSpec) ProtoMessage()               {}
func (*ResponseSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResponseSpec) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ResponseSpec) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *ResponseSpec) GetErrorRate() float32 {
	if m != nil {
		return m.ErrorRate
	}
	return 0
}

type StreamingResponseSpec struct {
	// how many responses to send.
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	// distributions for latency and body size
	LatencyPercentiles map[int32]int64 `protobuf:"bytes,2,rep,name=latencyPercentiles" json:"latencyPercentiles,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LengthPercentiles  map[int32]int64 `protobuf:"bytes,3,rep,name=lengthPercentiles" json:"lengthPercentiles,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ErrorRate          float32         `protobuf:"fixed32,4,opt,name=errorRate" json:"errorRate,omitempty"`
}

func (m *StreamingResponseSpec) Reset()                    { *m = StreamingResponseSpec{} }
func (m *StreamingResponseSpec) String() string            { return proto.CompactTextString(m) }
func (*StreamingResponseSpec) ProtoMessage()               {}
func (*StreamingResponseSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StreamingResponseSpec) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StreamingResponseSpec) GetLatencyPercentiles() map[int32]int64 {
	if m != nil {
		return m.LatencyPercentiles
	}
	return nil
}

func (m *StreamingResponseSpec) GetLengthPercentiles() map[int32]int64 {
	if m != nil {
		return m.LengthPercentiles
	}
	return nil
}

func (m *StreamingResponseSpec) GetErrorRate() float32 {
	if m != nil {
		return m.ErrorRate
	}
	return 0
}

// The response message containing the greetings
type ResponseReply struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	// Time last frame sent (0 if not a streaming response)
	LastFrameSent int64 `protobuf:"varint,2,opt,name=lastFrameSent" json:"lastFrameSent,omitempty"`
	// Server time of current frame sent.
	CurrentFrameSent int64 `protobuf:"varint,3,opt,name=currentFrameSent" json:"currentFrameSent,omitempty"`
}

func (m *ResponseReply) Reset()                    { *m = ResponseReply{} }
func (m *ResponseReply) String() string            { return proto.CompactTextString(m) }
func (*ResponseReply) ProtoMessage()               {}
func (*ResponseReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseReply) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ResponseReply) GetLastFrameSent() int64 {
	if m != nil {
		return m.LastFrameSent
	}
	return 0
}

func (m *ResponseReply) GetCurrentFrameSent() int64 {
	if m != nil {
		return m.CurrentFrameSent
	}
	return 0
}

func init() {
	proto.RegisterType((*ResponseSpec)(nil), "strest.ResponseSpec")
	proto.RegisterType((*StreamingResponseSpec)(nil), "strest.StreamingResponseSpec")
	proto.RegisterType((*ResponseReply)(nil), "strest.ResponseReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Responder service

type ResponderClient interface {
	// Sends a greeting
	Get(ctx context.Context, in *ResponseSpec, opts ...grpc.CallOption) (*ResponseReply, error)
	StreamingGet(ctx context.Context, opts ...grpc.CallOption) (Responder_StreamingGetClient, error)
}

type responderClient struct {
	cc *grpc.ClientConn
}

func NewResponderClient(cc *grpc.ClientConn) ResponderClient {
	return &responderClient{cc}
}

func (c *responderClient) Get(ctx context.Context, in *ResponseSpec, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := grpc.Invoke(ctx, "/strest.Responder/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responderClient) StreamingGet(ctx context.Context, opts ...grpc.CallOption) (Responder_StreamingGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Responder_serviceDesc.Streams[0], c.cc, "/strest.Responder/StreamingGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &responderStreamingGetClient{stream}
	return x, nil
}

type Responder_StreamingGetClient interface {
	Send(*StreamingResponseSpec) error
	Recv() (*ResponseReply, error)
	grpc.ClientStream
}

type responderStreamingGetClient struct {
	grpc.ClientStream
}

func (x *responderStreamingGetClient) Send(m *StreamingResponseSpec) error {
	return x.ClientStream.SendMsg(m)
}

func (x *responderStreamingGetClient) Recv() (*ResponseReply, error) {
	m := new(ResponseReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Responder service

type ResponderServer interface {
	// Sends a greeting
	Get(context.Context, *ResponseSpec) (*ResponseReply, error)
	StreamingGet(Responder_StreamingGetServer) error
}

func RegisterResponderServer(s *grpc.Server, srv ResponderServer) {
	s.RegisterService(&_Responder_serviceDesc, srv)
}

func _Responder_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strest.Responder/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponderServer).Get(ctx, req.(*ResponseSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Responder_StreamingGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResponderServer).StreamingGet(&responderStreamingGetServer{stream})
}

type Responder_StreamingGetServer interface {
	Send(*ResponseReply) error
	Recv() (*StreamingResponseSpec, error)
	grpc.ServerStream
}

type responderStreamingGetServer struct {
	grpc.ServerStream
}

func (x *responderStreamingGetServer) Send(m *ResponseReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *responderStreamingGetServer) Recv() (*StreamingResponseSpec, error) {
	m := new(StreamingResponseSpec)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Responder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "strest.Responder",
	HandlerType: (*ResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Responder_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingGet",
			Handler:       _Responder_StreamingGet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strest.proto",
}

func init() { proto.RegisterFile("strest.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x7d, 0x93, 0x69, 0xfb, 0xe8, 0x7d, 0x2d, 0xf4, 0x5d, 0xda, 0x1a, 0x8a, 0x42, 0x08, 0x2e,
	0x82, 0x8b, 0x22, 0xb5, 0x82, 0xb8, 0xb6, 0x0a, 0xe2, 0x42, 0xa6, 0x7b, 0x21, 0x4d, 0x2f, 0xb5,
	0x98, 0x4e, 0xc2, 0x64, 0x22, 0xe4, 0x47, 0xf8, 0x2b, 0xfc, 0xa3, 0xd2, 0xcc, 0x54, 0xfb, 0xa9,
	0xb8, 0x9b, 0x73, 0x98, 0x73, 0xce, 0xbd, 0x67, 0x18, 0x68, 0x64, 0x5a, 0x51, 0xa6, 0xfb, 0xa9,
	0x4a, 0x74, 0x82, 0x35, 0x83, 0xfc, 0x27, 0x68, 0x08, 0xca, 0xd2, 0x44, 0x66, 0x34, 0x4e, 0x29,
	0xc2, 0x2e, 0xd4, 0x62, 0x92, 0x33, 0xfd, 0xec, 0x32, 0x8f, 0x05, 0x55, 0x61, 0x11, 0xba, 0xf0,
	0x37, 0x0e, 0x35, 0xc9, 0xa8, 0x70, 0x1d, 0x8f, 0x05, 0x5c, 0xac, 0x20, 0x1e, 0x43, 0x9d, 0x94,
	0x4a, 0x94, 0x08, 0x35, 0xb9, 0xdc, 0x63, 0x81, 0x23, 0xbe, 0x08, 0xff, 0x9d, 0x43, 0x67, 0xac,
	0x15, 0x85, 0x8b, 0xb9, 0x9c, 0x6d, 0x24, 0xb5, 0xa1, 0x1a, 0x25, 0xb9, 0xd4, 0x36, 0xc8, 0x00,
	0x24, 0x40, 0x6b, 0xfc, 0x48, 0x2a, 0x22, 0xa9, 0xe7, 0x31, 0x65, 0xae, 0xe3, 0xf1, 0xe0, 0xdf,
	0xe0, 0xb2, 0x6f, 0x57, 0xd8, 0x6b, 0xd8, 0x7f, 0xd8, 0xd1, 0x8d, 0xa4, 0x56, 0x85, 0xd8, 0x63,
	0x88, 0x13, 0xf8, 0x6f, 0x16, 0x5b, 0x4f, 0xe1, 0x65, 0xca, 0xf0, 0x87, 0x94, 0x6d, 0x99, 0x09,
	0xd9, 0xb5, 0xdb, 0x2c, 0xa6, 0xb2, 0x55, 0x4c, 0x6f, 0x04, 0x47, 0x07, 0x06, 0xc6, 0x16, 0xf0,
	0x17, 0x2a, 0x6c, 0x2f, 0xcb, 0xe3, 0xb2, 0xab, 0xd7, 0x30, 0xce, 0xc9, 0x76, 0x6f, 0xc0, 0xb5,
	0x73, 0xc5, 0x7a, 0x37, 0xd0, 0xdd, 0x3f, 0xd1, 0x6f, 0x5c, 0xfc, 0x1c, 0x9a, 0xab, 0x25, 0x05,
	0xa5, 0x71, 0x81, 0x08, 0x95, 0x49, 0x32, 0x35, 0xea, 0xba, 0x28, 0xcf, 0x78, 0x0a, 0xcd, 0x38,
	0xcc, 0xf4, 0xad, 0x0a, 0x17, 0x34, 0x26, 0xa9, 0xad, 0xcd, 0x26, 0x89, 0x67, 0xd0, 0x8a, 0x72,
	0xa5, 0x48, 0xae, 0x5d, 0xe4, 0xe5, 0xc5, 0x1d, 0x7e, 0xf0, 0xc6, 0xa0, 0x6e, 0x72, 0xa7, 0xa4,
	0x70, 0x08, 0xfc, 0x8e, 0x34, 0xb6, 0x57, 0xfd, 0xaf, 0xd7, 0xde, 0xeb, 0x6c, 0xb3, 0xe5, 0x9c,
	0xfe, 0x1f, 0xbc, 0x87, 0xc6, 0xe7, 0x43, 0x2d, 0xe5, 0x27, 0xdf, 0x3e, 0xdf, 0x41, 0x9f, 0x80,
	0x9d, 0xb3, 0x49, 0xad, 0xfc, 0x1b, 0x17, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0xbc, 0x2e,
	0x72, 0x2b, 0x03, 0x00, 0x00,
}
